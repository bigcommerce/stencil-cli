#!/usr/bin/env node

require('colors');

var _ = require('lodash'),
    Bs = require('browser-sync').create(),
    Fs = require('fs'),
    Jspm = require('jspm'),
    JspmAssembler = require('../lib/jspmAssembler'),
    Path = require('path'),
    Pkg = require('../package.json'),
    Program = require('commander'),
    Server = require('../server'),
    ThemeConfig = require('../lib/themeConfig'),
    Url = require('url'),
    Wreck = require('wreck'),
    Shell = require('../lib/utils/shell'),
    themePath = process.cwd(),
    allowedCssCompilers = ['scss', 'less'],
    browserSyncPort,
    cssCompilerDir,
    cssWatchBaseDir = Path.join(themePath, 'assets/'),
    jsCompilerDir = Path.join(themePath, 'assets/js'),
    dotStencilFilePath = Path.join(themePath, '.stencil'),
    dotStencilFileExists = Fs.existsSync(dotStencilFilePath),
    dotStencilFile,
    isTopLevelCssRegex,
    stencilServerPort,
    themeConfig,
    themeConfigPath = Path.join(themePath, 'config.json'),
    themeConfigExists = Fs.existsSync(themeConfigPath),
    themeConfigHooks;

Program
    .version(Pkg.version)
    .option('-o, --open', 'Automatically open default browser')
    .option('-v, --variation [name]', 'Set which theme variation to use while developing')
    .option('-t, --test', 'Enable QA mode which will bundle all javascript for speed to test locally')
    .option('--tunnel', 'Create a tunnel URL which points to your local server that anyone can use.')
    .parse(process.argv);

if (! dotStencilFileExists) {
    return console.error('Error: Please run'.red + ' $ stencil init'.cyan + ' first.'.red);
}

if (! themeConfigExists) {
    return console.error('Error: You must have a '.red + 'config.json'.cyan + ' file in your top level theme directory.');
}

// If the value is true it means that no variation was passed in.
if (Program.variation === true) {
    return console.error('Error: You have to specify a value for -v or --variation'.red);
}

dotStencilFile = Fs.readFileSync(dotStencilFilePath, {encoding: 'utf-8'});
dotStencilFile = JSON.parse(dotStencilFile);

themeConfig = parseThemeConfig();
themeConfigHooks = themeConfig.config.hooks || {};

if (allowedCssCompilers.indexOf(themeConfig.config.css_compiler) === -1) {
    return console.error('Error: Only %s are allowed as CSS Compilers'.red, allowedCssCompilers.join(', '));
}

browserSyncPort = dotStencilFile.port;
stencilServerPort = ++dotStencilFile.port;
cssCompilerDir = cssWatchBaseDir + themeConfig.config.css_compiler;
isTopLevelCssRegex = new RegExp('^(?!_).+\.(?:' + themeConfig.config.css_compiler + ')$');

// Once stapler is in the production environment, we change this line to point to
// dotStencilFile.staplerUrl if it exists or fallback to dotStencilFile.storeUrl
dotStencilFile.staplerUrl = dotStencilFile.staplerUrl || 'https://bc-stapler.herokuapp.com';

if (!(dotStencilFile.normalStoreUrl)) {
    return console.error(
        'Error: Your stencil config is outdated. Please run'.red +
        ' $ stencil init'.cyan + ' again.'.red
    );
}

Wreck.get(
    Url.resolve(dotStencilFile.staplerUrl, '/stencil-version-check?v=' + Pkg.version),
    {
        headers: {
            'stencil-options': '{"get_data_only": true}',
            'stencil-store-url': dotStencilFile.normalStoreUrl
        }
    },
    function(err, res, payload) {
        var retError = err !== null,
            bundleTask;

        try {
            payload = JSON.parse(payload);
        } catch (e) {
            retError = true;
        }

        if (retError) {
            console.error(
                'The Bigcommerce Store you are pointing to either does\'t exist or is not available at this time.'.red
            );
        } else if (payload.status !== 'ok') {
            console.error(
                'Error: You are using an outdated version of stencil-cli, please run '.red +
                '$ npm install -g bigcommerce/stencil-cli'.cyan
            );
        } else {

            dotStencilFile.storeUrl = payload.sslUrl;
            dotStencilFile.normalStoreUrl = payload.baseUrl;

            if (themeConfig.config.jspm && Program.test) {
                bundleTask = JspmAssembler.assemble(
                    {
                        bootstrap: themeConfig.config.jspm.bootstrap
                    },
                    themePath
                );

                bundleTask(function(result) {
                    startServer();
                });
            } else {
                startServer();
            }
        }
    }
);

/**
 * Starts up the local Stencil Server as well as starts up BrowserSync and sets some watch options.
 */
function startServer() {
    if (themeConfigHooks.start && Shell.execSync(themeConfigHooks.start).status > 0) {
        return;
    }

    Server({dotStencilFile: dotStencilFile, themeVariationName: themeConfig.config.variationName}, function(err) {
        if (err) {
            throw err;
        }

        /**
         * Watch the appropriate css directory based on which compiler was chosen.
         * This will run on each file (and files in sub-directories) when the server starts
         * up. We only want to run compilation on top level files as the ones in sub directories
         * are most likely include files and will be pulled in by the top level files.
         *
         * When a file in a sub directory changes, we have to recompile all top level files because
         * more than one could have included the changed file.
         */
        Bs.watch(cssCompilerDir, function(event, file) {
            var relativePath,
                changedFile,
                basename;

            if (event === 'add' || event === 'change') {
                relativePath = Path.relative(cssCompilerDir, file);
                // Only run it through if it's a top level file
                if (
                    ! relativePath.match(/\//) && isTopLevelCssRegex.test(relativePath)
                ) {
                    basename = Path.basename(file, '.' + themeConfig.config.css_compiler);
                    changedFile = Path.join(process.cwd(), 'assets/css', basename + '.css');
                    Bs.reload(changedFile);
                // Only reload top level files if this is a change event and it's in a sub directory
                } else if (event === 'change') {
                    reloadTopLevelCss(cssCompilerDir);
                }
            }
        });

        if (themeConfigHooks.change_js) {
            Bs.watch(jsCompilerDir, { ignoreInitial: true }, function(event) {
                if (event === 'add' || event === 'change') {
                    Shell.exec(themeConfigHooks.change_js);
                }
            });
        }

        if (themeConfigHooks.change_css) {
            Bs.watch(cssCompilerDir, { ignoreInitial: true }, function(event) {
                if (event === 'add' || event === 'change') {
                    Shell.exec(themeConfigHooks.change_css);
                }
            });
        }

        Bs.watch('config.json', function(event) {
            if (event === 'change') {
                try {
                    themeConfig = parseThemeConfig();
                } catch (e) {
                    return console.error(e);
                }

                Bs.reload();
            }
        });

        Bs.init({
            open: !! Program.open,
            port: browserSyncPort,
            files: [
                '/assets',
                '/templates',
                '/lang'
            ].map(function(val) {
                return Path.join(themePath, val);
            }),
            watchOptions: {
                ignoreInitial: true,
                ignored: [
                    '/assets/scss',
                    '/assets/less',
                    '/assets/css',
                    '/assets/jspm_packages'
                ].map(function(val) {
                    return Path.join(themePath, val);
                })
            },
            proxy: {
                target: "localhost:" + stencilServerPort,
                reqHeaders: function () {
                    return {
                        "host": "localhost:" + browserSyncPort,
                        "accept-encoding": "identity"
                    }
                }
            },
            tunnel: !! Program.tunnel
        });

        // Handle manual reloading of browsers by typing 'rs';
        // Borrowed from https://github.com/remy/nodemon
        process.stdin.resume();
        process.stdin.setEncoding('utf8');
        process.stdin.on('data', function (data) {
            data = (data + '').trim().toLowerCase();

            // if the keys entered match the restartable value, then restart!
            if (data === 'rs') {
                Bs.reload();
            }
        });
    });
}

/**
 * Convenience function to parse Theme Config and set some default values if they aren't present
 *
 * @return object
 */
function parseThemeConfig() {
    var ret = {},
        themeConfig = new ThemeConfig(themeConfigPath, Program.variation);

    try {
        ret.config = themeConfig.getConfig();
    } catch (e) {
        return console.error(e);
    }

    return ret;
}

/**
 * Reloads all top level scss/less files that aren't prefixed with an underscore.
 *
 * @param cssCompilerDir
 */
function reloadTopLevelCss(cssCompilerDir) {
    var changedFile,
        basename;

    Fs.readdir(cssCompilerDir, function (err, files) {
        if (err) {
            return console.error(err);
        }

        files.filter(function (file) {
            return isTopLevelCssRegex.test(file);
        }).forEach(function (file) {
            basename = Path.basename(file, '.' + themeConfig.config.css_compiler);
            changedFile = Path.join(process.cwd(), 'assets/css', basename + '.css');

            Bs.reload(changedFile);
        });
    });
}
